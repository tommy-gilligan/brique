use core::ascii::Char;

pub fn next_char(c: Char) -> Char {
    match c {
        Char::CapitalA => Char::CapitalB,
        Char::CapitalB => Char::CapitalC,
        Char::CapitalC => Char::CapitalA,
        Char::CapitalD => Char::CapitalE,
        Char::CapitalE => Char::CapitalF,
        Char::CapitalF => Char::CapitalD,
        Char::CapitalG => Char::CapitalH,
        Char::CapitalH => Char::CapitalI,
        Char::CapitalI => Char::CapitalG,
        Char::CapitalJ => Char::CapitalK,
        Char::CapitalK => Char::CapitalL,
        Char::CapitalL => Char::CapitalJ,
        Char::CapitalM => Char::CapitalN,
        Char::CapitalN => Char::CapitalO,
        Char::CapitalO => Char::CapitalM,
        Char::CapitalP => Char::CapitalQ,
        Char::CapitalQ => Char::CapitalR,
        Char::CapitalR => Char::CapitalS,
        Char::CapitalS => Char::CapitalP,
        Char::CapitalT => Char::CapitalU,
        Char::CapitalU => Char::CapitalV,
        Char::CapitalV => Char::CapitalT,
        Char::CapitalW => Char::CapitalX,
        Char::CapitalX => Char::CapitalY,
        Char::CapitalY => Char::CapitalZ,
        Char::CapitalZ => Char::CapitalW,
        Char::Digit1 => Char::Digit2,
        Char::Digit2 => Char::Digit3,
        Char::Digit3 => Char::Digit4,
        Char::Digit4 => Char::Digit5,
        Char::Digit5 => Char::Digit6,
        Char::Digit6 => Char::Digit7,
        Char::Digit7 => Char::Digit8,
        Char::Digit8 => Char::Digit9,
        Char::Digit9 => Char::Digit0,
        Char::Digit0 => Char::Digit1,
        e => e,
    }
}
