use embedded_graphics::{
    draw_target::DrawTarget,
    mono_font::{MonoTextStyle, ascii::FONT_6X9},
    pixelcolor::BinaryColor,
    prelude::*,
    primitives::{PrimitiveStyle, Rectangle},
    text::{
        Text,
        renderer::{CharacterStyle, TextRenderer},
    },
};

pub struct Textbox<'a, A> {
    buffer: A,
    mono_text_style: MonoTextStyle<'a, BinaryColor>,
    character_bounding_box: Rectangle,
    row_index: usize,
    highlighted_range: Option<core::ops::Range<usize>>,
}

impl<'a, A> Textbox<'a, A> {
    pub fn new(buffer: A) -> Self {
        let mono_text_style = MonoTextStyle::new(&FONT_6X9, BinaryColor::Off);

        Self {
            buffer,
            character_bounding_box: mono_text_style
                .measure_string("A", Point::zero(), embedded_graphics::text::Baseline::Top)
                .bounding_box,
            mono_text_style,
            row_index: 0,
            highlighted_range: None,
        }
    }

    fn erase_index<D>(&mut self, device: &mut D, index: usize)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let _ = Rectangle::new(
            self.position_from_index(device, index),
            self.character_bounding_box.size,
        )
        .into_styled(PrimitiveStyle::with_fill(BinaryColor::On))
        .draw(device);
    }

    fn characters_per_row<D>(&self, device: &mut D) -> u32
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        device.bounding_box().size.width / self.character_bounding_box.size.width
    }

    fn row<D>(&self, device: &mut D, index: usize) -> usize
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        index / self.characters_per_row(device) as usize
    }

    fn position_from_index<D>(&self, device: &mut D, index: usize) -> Point
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let y = self.row(device, index) as u32 * self.character_bounding_box.size.height;
        let col = index as u32 % self.characters_per_row(device);
        let x = col * self.character_bounding_box.size.width;

        Point::new(
            x.try_into().unwrap(),
            y as i32 - self.character_bounding_box.size.height as i32 * self.row_index as i32,
        )
    }

    #[allow(dead_code)]
    fn scroll_up(&mut self) {
        self.row_index = (self.row_index - 1).max(0)
    }

    fn scroll_to<D>(&mut self, device: &mut D, index: usize) -> bool
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let row_index = index / self.characters_per_row(device) as usize;
        if row_index == self.row_index {
            false
        } else {
            self.row_index = row_index;
            true
        }
    }
}

impl<'a, A> Textbox<'a, A>
where
    A: core::ops::Deref<Target = str>,
{
    pub fn highlight<D>(&mut self, device: &mut D, range: core::ops::Range<usize>)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        if let Some(highlighted_range) = &self.highlighted_range {
            self.draw(device, Some(highlighted_range.clone()), false);
        }
        self.highlighted_range = Some(range.clone());
        if self.scroll_to(device, range.end) {
            let _ = device.clear(BinaryColor::On);
            self.draw(device, None, false);
        }
        self.draw(device, self.highlighted_range.clone(), true);
    }

    fn draw_character_at_index<D>(&mut self, device: &mut D, index: usize, invert: bool)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let _ = Rectangle::new(
            self.position_from_index(device, index),
            self.character_bounding_box.size,
        )
        .into_styled(if invert {
            PrimitiveStyle::with_fill(BinaryColor::Off)
        } else {
            PrimitiveStyle::with_fill(BinaryColor::On)
        })
        .draw(device);

        let mut mono_text_style = self.mono_text_style;
        if invert {
            mono_text_style.set_background_color(Some(BinaryColor::Off));
            mono_text_style.set_text_color(Some(BinaryColor::On));
        }

        let _ = Text::with_baseline(
            self.buffer.get(index..(index + 1)).unwrap(),
            self.position_from_index(device, index),
            mono_text_style,
            embedded_graphics::text::Baseline::Top,
        )
        .draw(device);
    }

    #[allow(dead_code)]
    fn scroll_down<D>(&mut self, device: &mut D)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        self.row_index = (self.row_index + 1).min(self.max_row_index(device));
        self.clear_last_row(device)
    }

    #[allow(dead_code)]
    fn clear_last_row<D>(&mut self, device: &mut D)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let n_rows_on_screen =
            device.bounding_box().size.width / self.character_bounding_box.size.height - 1;
        let rectangle = Rectangle::new(
            Point::new(
                0,
                (self.character_bounding_box.size.height * n_rows_on_screen)
                    .try_into()
                    .unwrap(),
            ),
            Size::new(
                device.bounding_box().size.width,
                device.bounding_box().size.height
                    - (self.character_bounding_box.size.height * n_rows_on_screen),
            ),
        );
        let _ = rectangle
            .into_styled(PrimitiveStyle::with_fill(BinaryColor::On))
            .draw(device);
    }

    #[allow(dead_code)]
    fn max_row_index<D>(&mut self, device: &mut D) -> usize
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        let n_rows_on_screen =
            device.bounding_box().size.width / self.character_bounding_box.size.height;
        let n_rows_in_buffer = self
            .buffer
            .len()
            .div_ceil(self.characters_per_row(device).try_into().unwrap());
        n_rows_in_buffer.saturating_sub(n_rows_on_screen as usize)
    }

    pub fn draw<D>(&mut self, device: &mut D, range: Option<core::ops::Range<usize>>, invert: bool)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        for i in range.unwrap_or(0..self.buffer.len()) {
            self.draw_character_at_index(device, i, invert);
        }
    }
}

impl<'a, const N: usize> Textbox<'a, heapless::String<N>> {
    pub fn backspace<D>(&mut self, device: &mut D)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        if !self.buffer.is_empty() {
            self.erase_index(device, self.buffer.len() - 1);
            let _ = self.buffer.pop();
        }
    }

    pub fn push<D>(&mut self, device: &mut D, character: char, invert: bool)
    where
        D: DrawTarget<Color = BinaryColor>,
    {
        if self.buffer.len() < self.buffer.capacity() {
            let _ = self.buffer.push(character);
            self.draw_character_at_index(device, self.buffer.len() - 1, invert);
        }
    }

    pub fn release(self) -> heapless::String<N> {
        self.buffer
    }
}

#[cfg(test)]
mod test {
    extern crate std;
    use core::str::FromStr;

    use embedded_graphics::{Pixel, mock_display::MockDisplay};
    use embedded_graphics_core::{draw_target::DrawTarget, pixelcolor::BinaryColor};

    pub struct Device {
        pub display: MockDisplay<BinaryColor>,
    }

    impl Device {
        pub fn new() -> Self {
            let mut display = MockDisplay::new();
            display.set_allow_out_of_bounds_drawing(true);
            display.set_allow_overdraw(true);

            Self { display }
        }
    }

    impl crate::Keypad for Device {
        async fn event(&mut self) -> crate::KeyEvent {
            crate::KeyEvent::Down(crate::Key::Down)
        }

        fn last_pressed(&mut self) -> Option<embassy_time::Duration> {
            None
        }
    }

    impl DrawTarget for Device {
        type Color = BinaryColor;
        type Error = core::convert::Infallible;
        fn draw_iter<
            I: IntoIterator<Item = Pixel<<Self as embedded_graphics::draw_target::DrawTarget>::Color>>,
        >(
            &mut self,
            pixels: I,
        ) -> Result<(), <Self as embedded_graphics::draw_target::DrawTarget>::Error> {
            self.display.draw_iter(pixels)
        }
    }

    impl embedded_graphics::prelude::Dimensions for Device {
        fn bounding_box(&self) -> embedded_graphics::primitives::Rectangle {
            self.display.bounding_box()
        }
    }

    #[test]
    fn test_textbox() {
        let characters = heapless::String::<15>::from_str("abc").unwrap();
        let mut device = Device::new();
        let _ = device.clear(BinaryColor::On);
        let mut textbox = super::Textbox::new(characters);
        textbox.draw(&mut device, None, false);
        textbox.erase_index(&mut device, 1);
        textbox.push(&mut device, 'G', false);
        textbox.backspace(&mut device);
        textbox.push(&mut device, 'H', false);
        textbox.push(&mut device, 'I', false);
        textbox.push(&mut device, 'J', false);
        textbox.push(&mut device, 'K', false);
        textbox.push(&mut device, 'L', false);
        textbox.push(&mut device, 'M', false);
        textbox.push(&mut device, 'N', false);
        textbox.push(&mut device, 'O', false);

        device.display.assert_pattern(&[
            "################################################################",
            "###################.##.##...####...##.##.##.####.###.##.##.#####",
            "###################.##.###.######.###.#.###.####..#..##..#.#####",
            "##...#########...##....###.######.###..####.####.#.#.##.#..#####",
            "#.##.########.#####.##.###.######.###.#.###.####.#.#.##.##.#####",
            "#.##.########.#####.##.###.###.##.###.##.##.####.###.##.##.#####",
            "##...#########...##.##.##...###..####.##.##....#.###.##.##.#####",
            "################################################################",
            "################################################################",
            "################################################################",
            "#...############################################################",
            ".###.###########################################################",
            ".###.###########################################################",
            ".###.###########################################################",
            ".###.###########################################################",
            "#...############################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
        ]);
        assert_eq!(textbox.release(), "abcHIJKLMNO");
    }

    #[test]
    fn test_highlight() {
        let characters = heapless::String::<15>::from_str("abcdefghijklmn").unwrap();
        let mut device = Device::new();
        let _ = device.clear(BinaryColor::On);
        let mut textbox = super::Textbox::new(characters);
        textbox.draw(&mut device, None, false);
        textbox.draw(&mut device, Some(4..7), true);

        device.display.assert_pattern(&[
            "########################..................######################",
            "#######.##############.#.........#........#.######.######.######",
            "#######.##############.#........#.#.......#.####################",
            "##...##...####...###...#..##....#.....##..#...###..#####..######",
            "#.##.##.##.##.#####.##.#.#.##..###...#..#.#.##.###.######.######",
            "#.##.##.##.##.#####.##.#.##.....#....#..#.#.##.###.######.######",
            "##...##...####...###...#..###...#.....###.#.##.##...#####.######",
            "########################................#.#############.#.######",
            "########################..............##..##############.#######",
            "################################################################",
            "#.#####..#######################################################",
            "#.######.#######################################################",
            "#.#.####.###..#.###...##########################################",
            "#..#####.###.#.#.##.##.#########################################",
            "#.#.####.###.#.#.##.##.#########################################",
            "#.##.##...##.###.##.##.#########################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
        ]);
        assert_eq!(
            textbox.release(),
            heapless::String::<15>::from_str("abcdefghijklmn").unwrap()
        );
    }

    #[test]
    fn test_scroll() {
        let mut device = Device::new();
        let _ = device.clear(BinaryColor::On);
        let mut textbox = super::Textbox::new(
            "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHH",
        );
        textbox.scroll_down(&mut device);
        textbox.draw(&mut device, None, false);

        device.display.assert_pattern(&[
            "################################################################",
            "....##....##....##....##....##....##....##....##....##....######",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            "....##....##....##....##....##....##....##....##....##....######",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            "....##....##....##....##....##....##....##....##....##....######",
            "################################################################",
            "################################################################",
            "################################################################",
            "##..####..####..####..####..####..####..####..####..####..######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "##..####..####..####..####..####..####..####..####..####..######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#...###...###...###...###...###...###...###...###...###...######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "################################################################",
            "################################################################",
            "################################################################",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "################################################################",
            "################################################################",
            "################################################################",
            "##..####..####..####..####..####..####..####..####..####..######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "##..####..####..####..####..####..####..####..####..####..######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "#....##....#####################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "################################################################",
            "################################################################",
            "################################################################",
        ]);
    }

    #[test]
    fn test_tail_on_push() {
        let mut device = Device::new();
        let _ = device.clear(BinaryColor::On);
        let mut textbox = super::Textbox::new(
            heapless::String::<72>::from_str(
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGG",
            )
            .unwrap(),
        );
        textbox.draw(&mut device, None, false);

        // should tail on push
        textbox.push(&mut device, 'H', false);
        textbox.push(&mut device, 'H', false);
        textbox.scroll_down(&mut device);
        textbox.draw(&mut device, None, false);

        assert_eq!(
            textbox.release(),
            heapless::String::<72>::from_str(
                "AAAAAAAAAABBBBBBBBBBCCCCCCCCCCDDDDDDDDDDEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGHH"
            )
            .unwrap(),
        );

        device.display.assert_pattern(&[
            "################################################################",
            "....##....##....##....##....##....##....##....##....##....######",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            "....##....##....##....##....##....##....##....##....##....######",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            ".###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#.###.#####",
            "....##....##....##....##....##....##....##....##....##....######",
            "################################################################",
            "################################################################",
            "################################################################",
            "##..####..####..####..####..####..####..####..####..####..######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "##..####..####..####..####..####..####..####..####..####..######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#...###...###...###...###...###...###...###...###...###...######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "################################################################",
            "################################################################",
            "################################################################",
            "#....##....##....##....##....##....##....##....##....##....#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#...###...###...###...###...###...###...###...###...###...######",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "################################################################",
            "################################################################",
            "################################################################",
            "##..####..####..####..####..####..####..####..####..####..######",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "#.#####.#####.#####.#####.#####.#####.#####.#####.#####.########",
            "#.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..##.#..#####",
            "#.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.##.#####",
            "##..####..####..####..####..####..####..####..####..####..######",
            "################################################################",
            "################################################################",
            "################################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "#....##....#####################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "#.##.##.##.#####################################################",
            "################################################################",
            "################################################################",
            "################################################################",
        ]);
    }
}
