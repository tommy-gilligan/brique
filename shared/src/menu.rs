use core::marker::PhantomData;

use embedded_graphics::{
    draw_target::{Clipped, DrawTargetExt},
    mono_font::{
        MonoTextStyle,
        ascii::{FONT_6X9, FONT_6X10},
    },
    prelude::*,
    primitives::PrimitiveStyle,
    text::{Text, renderer::TextRenderer},
};
use embedded_graphics_core::{pixelcolor::BinaryColor, primitives::Rectangle};

use crate::held_key::HeldKey;

pub struct Menu<'a, T, F, D>
where
    T: AsRef<str> + Clone,
    F: Fn(
        &mut Clipped<'_, Clipped<'_, D>>,
        bool,
        &str,
        Point,
        MonoTextStyle<'_, BinaryColor>,
    ) -> Option<Point>,
    D: DrawTarget<Color = BinaryColor> + crate::Keypad,
{
    items: &'a mut [T],
    index: usize,
    start_of_page_index: usize,
    bottom_visible_index: usize,
    page_size: usize,
    held_key: HeldKey,
    select_label: Option<&'a str>,
    renderer: F,
    display: PhantomData<D>,
}

impl<'a, T, F, D> Menu<'a, T, F, D>
where
    T: AsRef<str> + Clone,
    F: Fn(
        &mut Clipped<'_, Clipped<'_, D>>,
        bool,
        &str,
        Point,
        MonoTextStyle<'_, BinaryColor>,
    ) -> Option<Point>,
    D: DrawTarget<Color = BinaryColor> + crate::Keypad,
{
    pub fn new(items: &'a mut [T], select_label: Option<&'a str>, renderer: F) -> Self {
        assert!(!items.is_empty());
        Self {
            items,
            index: 0,
            start_of_page_index: 0,
            bottom_visible_index: 0,
            page_size: 0,
            held_key: HeldKey::new(750, 250),
            select_label,
            renderer,
            display: PhantomData,
        }
    }

    fn down(&mut self) {
        if self.index < self.items.len() - 1 {
            self.index += 1;
        }
        if self.index > self.bottom_visible_index {
            self.page_size = self.index - self.start_of_page_index;
            self.start_of_page_index = self.index;
        }
    }

    fn up(&mut self) {
        if self.index > 0 {
            self.index -= 1;
        }
        if self.index < self.start_of_page_index {
            self.start_of_page_index = self.index.saturating_sub(self.page_size - 1);
        }
    }

    fn text_style(&self, selected: bool) -> MonoTextStyle<'_, BinaryColor> {
        embedded_graphics::mono_font::MonoTextStyleBuilder::new()
            .text_color(if selected {
                BinaryColor::On
            } else {
                BinaryColor::Off
            })
            .font(&FONT_6X10)
            .build()
    }

    fn draw(&mut self, target: &mut D) -> Result<(), ()> {
        let _ = target
            .bounding_box()
            .into_styled(PrimitiveStyle::with_fill(BinaryColor::On))
            .draw(target);

        let mut target = if let Some(select_label) = self.select_label {
            let text_bounding_box = embedded_graphics::mono_font::MonoTextStyleBuilder::new()
                .text_color(BinaryColor::Off)
                .font(&FONT_6X9)
                .build()
                .measure_string(
                    select_label,
                    Point::new(
                        (target.bounding_box().size.width / 2).try_into().unwrap(),
                        (target.bounding_box().size.height).try_into().unwrap(),
                    ),
                    embedded_graphics::text::Baseline::Bottom,
                )
                .bounding_box;

            let text_style = embedded_graphics::text::TextStyleBuilder::new()
                .alignment(embedded_graphics::text::Alignment::Center)
                .baseline(embedded_graphics::text::Baseline::Bottom)
                .build();

            let _ = Text::with_text_style(
                select_label,
                Point::new(
                    (target.bounding_box().size.width / 2).try_into().unwrap(),
                    target.bounding_box().size.height as i32 - 1,
                ),
                embedded_graphics::mono_font::MonoTextStyleBuilder::new()
                    .text_color(BinaryColor::Off)
                    .font(&FONT_6X9)
                    .build(),
                text_style,
            )
            .draw(target);

            target.clipped(&Rectangle::new(
                Point::zero(),
                Size::new(
                    target.bounding_box().size.width,
                    target.bounding_box().size.height - text_bounding_box.size.height,
                ),
            ))
        } else {
            target.clipped(&Rectangle::new(Point::zero(), target.bounding_box().size))
        };

        let mut last_drawn_index = 0;
        let mut point = Point::zero();
        for (index, a) in self.items[self.start_of_page_index..].iter().enumerate() {
            if let Some(p) = (self.renderer)(
                &mut target.clipped(&target.bounding_box()),
                (self.index - self.start_of_page_index) == index,
                a.as_ref(),
                point,
                self.text_style((self.index - self.start_of_page_index) == index),
            ) {
                point = p;
                last_drawn_index = index;
            }
        }
        self.bottom_visible_index = last_drawn_index + self.start_of_page_index;
        Ok(())
    }

    pub async fn process(&mut self, device: &mut D) -> Option<T> {
        loop {
            if let Ok(()) = self.draw(device) {
                match self.held_key.event(device).await {
                    Some(
                        crate::held_key::Event::Down(crate::Key::Down)
                        | crate::held_key::Event::Delay(crate::Key::Down)
                        | crate::held_key::Event::Repeat(crate::Key::Down),
                    ) => {
                        self.down();
                    }
                    Some(
                        crate::held_key::Event::Down(crate::Key::Up)
                        | crate::held_key::Event::Delay(crate::Key::Up)
                        | crate::held_key::Event::Repeat(crate::Key::Up),
                    ) => {
                        self.up();
                    }
                    Some(crate::held_key::Event::Down(crate::Key::Cancel)) => {
                        return None;
                    }
                    Some(crate::held_key::Event::Down(crate::Key::Select)) => {
                        return Some(self.items[self.index].clone());
                    }
                    _ => {}
                }
            }
        }
    }
}

pub fn row_render(
    draw_target: &mut impl DrawTarget<Color = BinaryColor>,
    selected: bool,
    item: &str,
    point: Point,
    text_style: MonoTextStyle<'_, BinaryColor>,
) -> Option<Point> {
    let text_bounding_box = text_style
        .measure_string(item, point, embedded_graphics::text::Baseline::Top)
        .bounding_box;

    if draw_target
        .bounding_box()
        .contains(Point::new(0, text_bounding_box.bottom_right().unwrap().y))
    {
        let _ = Rectangle::new(
            point,
            Size::new(
                draw_target.bounding_box().size.width,
                text_bounding_box.size.height,
            ),
        )
        .into_styled(PrimitiveStyle::with_fill(if selected {
            BinaryColor::Off
        } else {
            BinaryColor::On
        }))
        .draw(draw_target);

        let _ = Text::with_baseline(
            item,
            point,
            text_style,
            embedded_graphics::text::Baseline::Top,
        )
        .draw(draw_target);

        Some(Point::new(
            point.x,
            point.y + text_bounding_box.size.height as i32,
        ))
    } else {
        None
    }
}

pub fn grid_render(
    draw_target: &mut impl DrawTarget<Color = BinaryColor>,
    selected: bool,
    item: &str,
    point: Point,
    text_style: MonoTextStyle<'_, BinaryColor>,
) -> Option<Point> {
    let text_bounding_box = text_style
        .measure_string(item, point, embedded_graphics::text::Baseline::Top)
        .bounding_box;

    if draw_target.bounding_box().contains(Point::new(
        text_bounding_box.bottom_right().unwrap().x,
        text_bounding_box.bottom_right().unwrap().y,
    )) {
        let _ = Rectangle::new(
            point,
            Size::new(text_bounding_box.size.width, text_bounding_box.size.height),
        )
        .into_styled(PrimitiveStyle::with_fill(if selected {
            BinaryColor::Off
        } else {
            BinaryColor::On
        }))
        .draw(draw_target);

        let _ = Text::with_baseline(
            item,
            point,
            text_style,
            embedded_graphics::text::Baseline::Top,
        )
        .draw(draw_target);

        Some(Point::new(
            point.x + text_bounding_box.size.width as i32,
            point.y,
        ))
    } else if draw_target.bounding_box().contains(Point::new(
        0,
        text_bounding_box.bottom_right().unwrap().y + text_bounding_box.size.height as i32,
    )) {
        let _ = Rectangle::new(
            Point::new(0, text_bounding_box.bottom_right().unwrap().y),
            Size::new(text_bounding_box.size.width, text_bounding_box.size.height),
        )
        .into_styled(PrimitiveStyle::with_fill(if selected {
            BinaryColor::Off
        } else {
            BinaryColor::On
        }))
        .draw(draw_target);

        let _ = Text::with_baseline(
            item,
            Point::new(0, text_bounding_box.bottom_right().unwrap().y),
            text_style,
            embedded_graphics::text::Baseline::Top,
        )
        .draw(draw_target);

        Some(Point::new(
            text_bounding_box.size.width as i32,
            text_bounding_box.bottom_right().unwrap().y,
        ))
    } else {
        None
    }
}

#[cfg(test)]
mod test {
    use embedded_graphics::{Pixel, mock_display::MockDisplay};
    use embedded_graphics_core::{draw_target::DrawTarget, pixelcolor::BinaryColor};

    pub struct Device {
        pub display: MockDisplay<BinaryColor>,
    }

    impl Device {
        pub fn new() -> Self {
            let mut display = MockDisplay::new();
            display.set_allow_out_of_bounds_drawing(false);
            display.set_allow_overdraw(true);

            Self { display }
        }
    }

    impl crate::Keypad for Device {
        async fn event(&mut self) -> crate::KeyEvent {
            crate::KeyEvent::Down(crate::Key::Down)
        }

        fn last_pressed(&mut self) -> Option<embassy_time::Duration> {
            None
        }
    }

    impl DrawTarget for Device {
        type Color = BinaryColor;
        type Error = core::convert::Infallible;
        fn draw_iter<
            I: IntoIterator<Item = Pixel<<Self as embedded_graphics::draw_target::DrawTarget>::Color>>,
        >(
            &mut self,
            pixels: I,
        ) -> Result<(), <Self as embedded_graphics::draw_target::DrawTarget>::Error> {
            self.display.draw_iter(pixels)
        }
    }

    impl embedded_graphics::prelude::Dimensions for Device {
        fn bounding_box(&self) -> embedded_graphics::primitives::Rectangle {
            self.display.bounding_box()
        }
    }

    #[test]
    fn test_row_render() {
        let mut rows = ["ABC", "XYZ"];
        let mut device = Device::new();
        let mut menu = crate::menu::Menu::new(&mut rows, Some("Yyqg"), |a, b, c, d, e| {
            crate::menu::row_render(a, b, c, d, e)
        });
        let _ = menu.draw(&mut device);
        device.display.assert_pattern(&[
            "................................................................",
            "..#...####...###................................................",
            ".#.#...#..#.#...#...............................................",
            "#...#..#..#.#...................................................",
            "#...#..###..#...................................................",
            "#####..#..#.#...................................................",
            "#...#..#..#.#...#...............................................",
            "#...#.####...###................................................",
            "................................................................",
            "................................................................",
            "################################################################",
            ".###.#.###.#.....###############################################",
            ".###.#.###.#####.###############################################",
            "#.#.###.#.#####.################################################",
            "##.#####.#####.#################################################",
            "#.#.####.####.##################################################",
            ".###.###.###.###################################################",
            ".###.###.###.....###############################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "#####################.###.######################################",
            "#####################.###.######################################",
            "######################.#.###.##.###...###..#####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.#####...###...###...####################",
            "############################.##.#####.#####.####################",
            "#############################..######.###..#####################",
        ]);
    }

    #[test]
    fn test_row_render_next() {
        let mut rows = ["ABC", "XYZ"];
        let mut device = Device::new();
        let mut menu = crate::menu::Menu::new(&mut rows, Some("Yyqg"), |a, b, c, d, e| {
            crate::menu::row_render(a, b, c, d, e)
        });
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        device.display.assert_pattern(&[
            "################################################################",
            "##.###....###...################################################",
            "#.#.###.##.#.###.###############################################",
            ".###.##.##.#.###################################################",
            ".###.##...##.###################################################",
            ".....##.##.#.###################################################",
            ".###.##.##.#.###.###############################################",
            ".###.#....###...################################################",
            "################################################################",
            "################################################################",
            "................................................................",
            "#...#.#...#.#####...............................................",
            "#...#.#...#.....#...............................................",
            ".#.#...#.#.....#................................................",
            "..#.....#.....#.................................................",
            ".#.#....#....#..................................................",
            "#...#...#...#...................................................",
            "#...#...#...#####...............................................",
            "................................................................",
            "................................................................",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "#####################.###.######################################",
            "#####################.###.######################################",
            "######################.#.###.##.###...###..#####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.#####...###...###...####################",
            "############################.##.#####.#####.####################",
            "#############################..######.###..#####################",
        ]);
    }

    #[test]
    fn test_grid_render() {
        let mut rows = [
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
        ];
        let mut device = Device::new();
        let mut menu = crate::menu::Menu::new(&mut rows, Some("Yyqg"), |a, b, c, d, e| {
            crate::menu::grid_render(a, b, c, d, e)
        });
        let _ = menu.draw(&mut device);
        device.display.assert_pattern(&[
            "......##########################################################",
            "..#.......###...##....##.....#.....##...##.###.##...####...#####",
            ".#.#..#.##.#.###.##.##.#.#####.#####.###.#.###.###.######.######",
            "#...#.#.##.#.######.##.#.#####.#####.#####.###.###.######.######",
            "#...#.#...##.######.##.#....##....##.#####.....###.######.######",
            "#####.#.##.#.######.##.#.#####.#####.##..#.###.###.######.######",
            "#...#.#.##.#.###.##.##.#.#####.#####.###.#.###.###.###.##.######",
            "#...#.....###...##....##.....#.######...##.###.##...###..#######",
            "......##########################################################",
            "################################################################",
            ".###.#.#####.###.#.###.#########################################",
            ".##.##.#####.###.#.###.#########################################",
            ".#.###.#####..#..#..##.#########################################",
            "..####.#####.#.#.#.#.#.#########################################",
            ".#.###.#####.###.#.##..#########################################",
            ".##.##.#####.###.#.###.#########################################",
            ".###.#.....#.###.#.###.#########################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "#####################.###.######################################",
            "#####################.###.######################################",
            "######################.#.###.##.###...###..#####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.#####...###...###...####################",
            "############################.##.#####.#####.####################",
            "#############################..######.###..#####################",
        ]);
    }

    #[test]
    fn test_grid_render_next() {
        let mut rows = [
            "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
        ];
        let mut device = Device::new();
        let mut menu = crate::menu::Menu::new(&mut rows, Some("Yyqg"), |a, b, c, d, e| {
            crate::menu::grid_render(a, b, c, d, e)
        });
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        menu.down();
        let _ = menu.draw(&mut device);
        device.display.assert_pattern(&[
            "################################################################",
            "##.###....###...##....##.....#.....##...##.###.##...####...#####",
            "#.#.###.##.#.###.##.##.#.#####.#####.###.#.###.###.######.######",
            ".###.##.##.#.######.##.#.#####.#####.#####.###.###.######.######",
            ".###.##...##.######.##.#....##....##.#####.....###.######.######",
            ".....##.##.#.######.##.#.#####.#####.##..#.###.###.######.######",
            ".###.##.##.#.###.##.##.#.#####.#####.###.#.###.###.###.##.######",
            ".###.#....###...##....##.....#.######...##.###.##...###..#######",
            "################################################################",
            "######......####################################################",
            ".###.##......###.#.###.#########################################",
            ".##.###......###.#.###.#########################################",
            ".#.####.......#..#..##.#########################################",
            "..#####......#.#.#.#.#.#########################################",
            ".#.####......###.#.##..#########################################",
            ".##.###......###.#.###.#########################################",
            ".###.######..###.#.###.#########################################",
            "######......####################################################",
            "######......####################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "################################################################",
            "#####################.###.######################################",
            "#####################.###.######################################",
            "######################.#.###.##.###...###..#####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.####.##.##.##.##.##.####################",
            "#######################.#####...###...###...####################",
            "############################.##.#####.#####.####################",
            "#############################..######.###..#####################",
        ]);
    }
}
